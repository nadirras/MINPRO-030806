// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

enum Gender {
  Laki_laki
  Perempuan
}

enum Role {
  EventCreator
  Pembeli
}

enum DiscountStatus {
  Active
  Expired
}

enum PointStatus {
  Active
  Expired
}

enum StatusOrder {
  Pending
  WaitingConfirmation
  Paid
  Cancel
}

enum EventStatus {
  ComingSoon
  available
  Finished
}

enum EventCategory {
  Festival
  Attraction
  Workshop
  Seminar
}

enum ZonaWaktu {
  WIB
  WITA
  WIT
}

enum StatusTransaction {
  Pending
  Processing
  Completed
  Failed
  Cancelled
  Refunded
  Expired
  On_Hold
}

model User {
  //menyimpan informasi dasar tentang pengguna, termasuk hubungan dengan detail pengguna, event, dan pesanan
  id               Int               @id @default(autoincrement())
  username         String            @unique
  email            String            @unique
  password         String
  usedReferralCode String? // Kode referral yang digunakan saat registrasi
  createdAt        DateTime          @default(now())
  activation       Boolean?          @default(false)
  Role             Role              @default(Pembeli)
  referral         Referral?
  UserDetail       UserDetail?
  discountVoucher  DiscountVoucher[]
  Points           Points[]
  Cart             Cart?
  Order            Order[]
  Transaction      Transaction[]
  EventOrganizer   EventOrganizer[]
}

model UserDetail {
  //menyimpan detail tambahan tentang pengguna, termasuk nama, tanggal lahir, nomor telepon, dan foto profil
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        Int      @unique
  nama_depan    String
  nama_belakang String
  jenis_kelamin Gender
  tanggal_lahir DateTime
  nomor_telepon String
  photo_profile String?  @db.LongText
}

model Referral {
  //menyimpan data kode referral yang dimiliki user 
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id])
  userId         Int      @unique
  myReferralCode String
  createdAt      DateTime @default(now())
}

model DiscountVoucher {
  //menyimpan data voucher diskon yang dimiliki user
  id                 Int            @id @default(autoincrement())
  user               User?          @relation(fields: [userId], references: [id])
  userId             Int
  discountCoupon     String
  discountPercentage Int
  createdAt          DateTime       @default(now())
  expired_date       DateTime
  discount_status    DiscountStatus
}

model Points {
  //menyimpan data poin yang dimiliki user
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [userId], references: [id])
  userId       Int
  points       Int         @default(0) //jumlah poin atau skor yang dimiliki pengguna, terkait dengan penggunaan kode referral.
  createdAt    DateTime    @default(now())
  expired_date DateTime
  point_status PointStatus
}

model EventOrganizer {
  //menyimpan informasi tentang penyelenggara acara, termasuk nama penyelenggara, gambar penyelenggara, kontak person, dan nomor kontak.
  id                  Int     @id @default(autoincrement())
  user                User    @relation(fields: [userId], references: [id])
  userId              Int
  eventOrganizer      String
  eventImgOrganizer   String  @db.LongText
  contactPerson       String
  contactPersonNumber String
  DetailEvent         Event[]
}

model Event {
  //menyimpan informasi tentang acara, termasuk kategori, nama, deskripsi, tanggal, waktu, lokasi, harga tiket, dan ketersediaan tempat duduk.
  id               Int            @id @default(autoincrement())
  eventOrganizer   EventOrganizer @relation(fields: [eventOrganizerId], references: [id])
  eventOrganizerId Int
  eventCategory    EventCategory
  eventName        String         @unique
  eventSlug        String         @unique
  eventImage       String         @db.LongText
  description      String?        @db.LongText
  availableSeats   Int
  startDate        DateTime
  endDate          DateTime
  startTime        String
  endTime          String
  zona_waktu       ZonaWaktu
  location         String
  province         String
  eventStatus      EventStatus
  CartItem         CartItem[]
  OrderItem        OrderItem[]
  Review           Review[]
  EventPrice       EventPrice?
}

model EventPrice {
  //menyimpan informasi tentang harga tiket acara, termasuk apakah tiket berbayar atau tidak, dan harga tiket.
  id          Int     @id @default(autoincrement())
  event       Event   @relation(fields: [eventId], references: [id])
  eventId     Int     @unique
  isPaid      Boolean @default(false)
  ticketPrice Int
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  CartItem  CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  eventId   Int
  quantity  Int
  createdAt DateTime @default(now())
  cart      Cart     @relation(fields: [cartId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
}

model Order {
  //menyimpan informasi tentang pesanan, termasuk pengguna yang memesan, acara yang dipesan, jumlah tiket yang dipesan, total harga, dan status pesanan.
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  total       Int
  status      StatusOrder
  orderDate   DateTime    @default(now())
  expiredDate DateTime
  OrderItem   OrderItem[]
  Payment     Payment?
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  quantity  Int
  createdAt DateTime @default(now())
}

// model EventItem {
//   id                Int             @id @default(autoincrement())
//   event             Event           @relation(fields: [eventId], references: [id])
//   eventId           Int
//   discountVoucher   DiscountVoucher @relation(fields: [discountVoucherId], references: [id])
//   discountVoucherId Int
// }

model Payment {
  id          Int           @id @default(autoincrement())
  orderId     Int           @unique
  order       Order         @relation(fields: [orderId], references: [id])
  amount      Int
  method      String
  createdAt   DateTime      @default(now())
  Transaction Transaction[]
}

model Transaction {
  id        Int               @id @default(autoincrement())
  userId    Int
  user      User              @relation(fields: [userId], references: [id])
  paymentId Int
  payment   Payment           @relation(fields: [paymentId], references: [id])
  status    StatusTransaction
  createdAt DateTime          @default(now())
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  eventId   Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id])
}
